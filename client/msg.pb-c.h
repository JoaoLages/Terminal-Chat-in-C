/* Generated by the protocol buffer compiler.  DO NOT EDIT! */

#ifndef PROTOBUF_C_msg_2eproto__INCLUDED
#define PROTOBUF_C_msg_2eproto__INCLUDED

#include <google/protobuf-c/protobuf-c.h>

PROTOBUF_C_BEGIN_DECLS


typedef struct _Index Index;
typedef struct _Login Login;
typedef struct _Chat Chat;
typedef struct _Query Query;
typedef struct _Status Status;


/* --- enums --- */

typedef enum _ChoiceType {
  CHOICE_TYPE__LOGIN = 11,
  CHOICE_TYPE__CHAT = 12,
  CHOICE_TYPE__QUERY = 13
} ChoiceType;

/* --- messages --- */

struct  _Index
{
  ProtobufCMessage base;
  ChoiceType choice;
  Login *login_info;
  Chat *chat_data;
  Query *query_limits;
};
#define INDEX__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&index__descriptor) \
    , 0, NULL, NULL, NULL }


struct  _Login
{
  ProtobufCMessage base;
  char *username;
};
#define LOGIN__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&login__descriptor) \
    , NULL }


struct  _Chat
{
  ProtobufCMessage base;
  protobuf_c_boolean has_id;
  int32_t id;
  char *text;
};
#define CHAT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&chat__descriptor) \
    , 0,0, NULL }


struct  _Query
{
  ProtobufCMessage base;
  protobuf_c_boolean has_idmin;
  int32_t idmin;
  protobuf_c_boolean has_idmax;
  int32_t idmax;
  size_t n_query_data;
  Chat **query_data;
};
#define QUERY__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&query__descriptor) \
    , 0,0, 0,0, 0,NULL }


struct  _Status
{
  ProtobufCMessage base;
  int32_t value;
};
#define STATUS__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&status__descriptor) \
    , 0 }


/* Index methods */
void   index__init
                     (Index         *message);
size_t index__get_packed_size
                     (const Index   *message);
size_t index__pack
                     (const Index   *message,
                      uint8_t             *out);
size_t index__pack_to_buffer
                     (const Index   *message,
                      ProtobufCBuffer     *buffer);
Index *
       index__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   index__free_unpacked
                     (Index *message,
                      ProtobufCAllocator *allocator);
/* Login methods */
void   login__init
                     (Login         *message);
size_t login__get_packed_size
                     (const Login   *message);
size_t login__pack
                     (const Login   *message,
                      uint8_t             *out);
size_t login__pack_to_buffer
                     (const Login   *message,
                      ProtobufCBuffer     *buffer);
Login *
       login__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   login__free_unpacked
                     (Login *message,
                      ProtobufCAllocator *allocator);
/* Chat methods */
void   chat__init
                     (Chat         *message);
size_t chat__get_packed_size
                     (const Chat   *message);
size_t chat__pack
                     (const Chat   *message,
                      uint8_t             *out);
size_t chat__pack_to_buffer
                     (const Chat   *message,
                      ProtobufCBuffer     *buffer);
Chat *
       chat__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   chat__free_unpacked
                     (Chat *message,
                      ProtobufCAllocator *allocator);
/* Query methods */
void   query__init
                     (Query         *message);
size_t query__get_packed_size
                     (const Query   *message);
size_t query__pack
                     (const Query   *message,
                      uint8_t             *out);
size_t query__pack_to_buffer
                     (const Query   *message,
                      ProtobufCBuffer     *buffer);
Query *
       query__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   query__free_unpacked
                     (Query *message,
                      ProtobufCAllocator *allocator);
/* Status methods */
void   status__init
                     (Status         *message);
size_t status__get_packed_size
                     (const Status   *message);
size_t status__pack
                     (const Status   *message,
                      uint8_t             *out);
size_t status__pack_to_buffer
                     (const Status   *message,
                      ProtobufCBuffer     *buffer);
Status *
       status__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   status__free_unpacked
                     (Status *message,
                      ProtobufCAllocator *allocator);
/* --- per-message closures --- */

typedef void (*Index_Closure)
                 (const Index *message,
                  void *closure_data);
typedef void (*Login_Closure)
                 (const Login *message,
                  void *closure_data);
typedef void (*Chat_Closure)
                 (const Chat *message,
                  void *closure_data);
typedef void (*Query_Closure)
                 (const Query *message,
                  void *closure_data);
typedef void (*Status_Closure)
                 (const Status *message,
                  void *closure_data);

/* --- services --- */


/* --- descriptors --- */

extern const ProtobufCEnumDescriptor    choice_type__descriptor;
extern const ProtobufCMessageDescriptor index__descriptor;
extern const ProtobufCMessageDescriptor login__descriptor;
extern const ProtobufCMessageDescriptor chat__descriptor;
extern const ProtobufCMessageDescriptor query__descriptor;
extern const ProtobufCMessageDescriptor status__descriptor;

PROTOBUF_C_END_DECLS


#endif  /* PROTOBUF_msg_2eproto__INCLUDED */
